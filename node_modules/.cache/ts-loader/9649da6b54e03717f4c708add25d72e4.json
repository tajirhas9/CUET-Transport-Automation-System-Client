{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js??ref--14-3!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tajirhas9/varsity/software_engineering/ctas/client/src/views/schedule/components/table.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/views/schedule/components/table.vue","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/babel.config.js","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS90YWppcmhhczkvdmFyc2l0eS9zb2Z0d2FyZV9lbmdpbmVlcmluZy9jdGFzL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL2hvbWUvdGFqaXJoYXM5L3ZhcnNpdHkvc29mdHdhcmVfZW5naW5lZXJpbmcvY3Rhcy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyLmpzIjsKaW1wb3J0IF9zZXQgZnJvbSAiL2hvbWUvdGFqaXJoYXM5L3ZhcnNpdHkvc29mdHdhcmVfZW5naW5lZXJpbmcvY3Rhcy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldC5qcyI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiL2hvbWUvdGFqaXJoYXM5L3ZhcnNpdHkvc29mdHdhcmVfZW5naW5lZXJpbmcvY3Rhcy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKLyoqCiAqIEBEZXZFeF9jb21wb25lbnQKICovCgppbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFdhdGNoIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IG1peGlucyB9IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnOwppbXBvcnQgVnVlRGV2ZXggZnJvbSAnQC9sYXlvdXQvbWl4aW4vdnVlLWRldmV4JzsKaW1wb3J0IHsgQnVzTW9kdWxlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2J1cyc7CmltcG9ydCB7IERyaXZlck1vZHVsZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9kcml2ZXInOwppbXBvcnQgeyBCdXNSb3V0ZU1vZHVsZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9idXMtcm91dGUnOwppbXBvcnQgeyBCdXNTY2hlZHVsZU1vZHVsZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9zY2hlZHVsZSc7Cgp2YXIgZGVmYXVsdF8xID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfbWl4aW5zKSB7CiAgX2luaGVyaXRzKGRlZmF1bHRfMSwgX21peGlucyk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoZGVmYXVsdF8xKTsKCiAgZnVuY3Rpb24gZGVmYXVsdF8xKCkgewogICAgdmFyIF90aGlzU3VwZXIsIF90aGlzU3VwZXIyLCBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgZGVmYXVsdF8xKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMuZ3JpZFJlZktleSA9ICdzY2hlZHVsZUdyaWQnOwoKICAgIF9zZXQoKF90aGlzU3VwZXIgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2dldFByb3RvdHlwZU9mKGRlZmF1bHRfMS5wcm90b3R5cGUpKSwgImRhdGFHcmlkUmVmS2V5IiwgX3RoaXMuZ3JpZFJlZktleSwgX3RoaXNTdXBlciwgdHJ1ZSk7CgogICAgX3NldCgoX3RoaXNTdXBlcjIgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2dldFByb3RvdHlwZU9mKGRlZmF1bHRfMS5wcm90b3R5cGUpKSwgInRhYmxlTmFtZSIsICdCdXMgU2NoZWR1bGUnLCBfdGhpc1N1cGVyMiwgdHJ1ZSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKGRlZmF1bHRfMSwgW3sKICAgIGtleTogImRyaXZlcnMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBEcml2ZXJNb2R1bGUuZHJpdmVyczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJidXNlcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIEJ1c01vZHVsZS5idXNlczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJidXNSb3V0ZXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBCdXNSb3V0ZU1vZHVsZS5idXNSb3V0ZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAic2NoZWR1bGVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQnVzU2NoZWR1bGVNb2R1bGUuc2NoZWR1bGUuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgIGlmIChuZXcgRGF0ZShhLmRhdGV0aW1lKSA+IG5ldyBEYXRlKGIuZGF0ZXRpbWUpKSB7CiAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gMDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGhpc1JvdXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0aGlzUm91dGUocm91dGVJZCkgewogICAgICByZXR1cm4gQnVzUm91dGVNb2R1bGUuYnVzUm91dGVzLmZpbmQoZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgICAgcmV0dXJuIHJvdXRlLmlkID09PSByb3V0ZUlkOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRMaXN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0TGlzdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLmxpc3RMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIEJ1c01vZHVsZS5nZXRCdXNlcygpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBEcml2ZXJNb2R1bGUuZ2V0RHJpdmVycygpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBCdXNSb3V0ZU1vZHVsZS5nZXRSb3V0ZXMoKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gQnVzU2NoZWR1bGVNb2R1bGUuZ2V0QnVzU2NoZWR1bGVzKCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIHRoaXMubGlzdExvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRMaXN0KCkgewogICAgICAgIHJldHVybiBfZ2V0TGlzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0TGlzdDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIm9uQ2VsbENsaWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNlbGxDbGljayhlKSB7CiAgICAgIGlmIChlLmNvbHVtbi5uYW1lID09PSAnYnVzJykgewogICAgICAgIHZhciBidXNJZCA9IGUuZGF0YS5idXM7CiAgICAgICAgY29uc29sZS5sb2coImJ1czogIi5jb25jYXQoYnVzSWQpKTsKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICBuYW1lOiAnQnVzZXMnLAogICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgIGJ1c0lkUHJvcDogYnVzSWQudG9TdHJpbmcoKQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKGUuY29sdW1uLm5hbWUgPT09ICdkcml2ZXInKSB7CiAgICAgICAgdmFyIGRyaXZlcklkID0gZS5kYXRhLmRyaXZlcjsKICAgICAgICBjb25zb2xlLmxvZygiZHJpdmVyOiAiLmNvbmNhdChkcml2ZXJJZCkpOwogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdEcml2ZXJzJywKICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICBkcml2ZXJJZFByb3A6IGRyaXZlcklkLnRvU3RyaW5nKCkKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSAvLyBUaGVzZSBtZXRob2Qgd2lsbCBnZXQgbWVyZ2VkIHdpdGggdGhlIFZ1ZURldmV4IG1peGluJ3MgbWV0aG9kCgogIH0sIHsKICAgIGtleTogIm9uSW5pdE5ld1JvdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Jbml0TmV3Um93KCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7CiAgICB9CiAgfSwgewogICAga2V5OiAib25TYXZpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9vblNhdmluZyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZSkgewogICAgICAgIHZhciBjaGFuZ2VzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLmxpc3RMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIGNoYW5nZXMgPSBlLmNoYW5nZXNbMF07CiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGNoYW5nZXMpOwoKICAgICAgICAgICAgICAgIGlmICghKGNoYW5nZXMudHlwZSA9PT0gJ2luc2VydCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIEJ1c1NjaGVkdWxlTW9kdWxlLmFkZEJ1c1NjaGVkdWxlKGNoYW5nZXMuZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKCEoY2hhbmdlcy50eXBlID09PSAndXBkYXRlJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2hhbmdlcyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIEJ1c1NjaGVkdWxlTW9kdWxlLnVwZGF0ZUJ1c1NjZWR1bGUoewogICAgICAgICAgICAgICAgICBpZDogY2hhbmdlcy5rZXksCiAgICAgICAgICAgICAgICAgIGRhdGE6IGNoYW5nZXMuZGF0YQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MnLAogICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRGF0YSB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJywKICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmICghKGUuY2hhbmdlc1swXS50eXBlID09PSAnaW5zZXJ0JykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExpc3QoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgICAgICAgICB0aXRsZTogJ0ZhaWxlZCcsCiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdEYXRhIHVwZGF0ZWQgZmFpbGVkJywKICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgZS5jYW5jZWwgPSB0cnVlOwogICAgICAgICAgICAgICAgdGhpcy5saXN0TG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzLCBbWzEsIDE5XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBvblNhdmluZyhfeCkgewogICAgICAgIHJldHVybiBfb25TYXZpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG9uU2F2aW5nOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3JlYXRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgICAgdGhpcy5nZXRMaXN0KCk7IC8vIHRhYmxlIGRhdGEKICAgIH0KICB9LCB7CiAgICBrZXk6ICJPbkRyaXZlcklkUHJvcENoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gT25Ecml2ZXJJZFByb3BDaGFuZ2UodmFsLCBvbGRWYWwpIHsKICAgICAgY29uc29sZS5sb2coImRyaXZlcklkUHJvcCBwcm9wcyBjaGFuZ2VkIGZyb20gIi5jb25jYXQob2xkVmFsLCAiIHRvICIpLmNvbmNhdCh2YWwpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJPbkNsZWFyRmlsdGVyVHJpZ2dlcmVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBPbkNsZWFyRmlsdGVyVHJpZ2dlcmVkKHZhbCkgewogICAgICBpZiAodmFsKSB7CiAgICAgICAgdGhpcy5kcml2ZXJJZFByb3AgPSB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBkZWZhdWx0XzE7Cn0obWl4aW5zKFZ1ZURldmV4KSk7CgpfX2RlY29yYXRlKFtQcm9wKCldLCBkZWZhdWx0XzEucHJvdG90eXBlLCAiZHJpdmVySWRQcm9wIiwgdm9pZCAwKTsKCl9fZGVjb3JhdGUoW1dhdGNoKCdkcml2ZXJJZFByb3AnKV0sIGRlZmF1bHRfMS5wcm90b3R5cGUsICJPbkRyaXZlcklkUHJvcENoYW5nZSIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ2NsZWFyRmlsdGVyVHJpZ2dlcmVkJyldLCBkZWZhdWx0XzEucHJvdG90eXBlLCAiT25DbGVhckZpbHRlclRyaWdnZXJlZCIsIG51bGwpOwoKZGVmYXVsdF8xID0gX19kZWNvcmF0ZShbQ29tcG9uZW50KHsKICBuYW1lOiAnU2NoZWR1bGVUYWJsZScsCiAgY29tcG9uZW50czoge30KfSldLCBkZWZhdWx0XzEpOwpleHBvcnQgZGVmYXVsdCBkZWZhdWx0XzE7"},null]}
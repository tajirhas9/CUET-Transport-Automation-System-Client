{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js??ref--14-3!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tajirhas9/varsity/software_engineering/ctas/client/src/layout/components/TagsView/index.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/layout/components/TagsView/index.vue","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/babel.config.js","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyLmpzIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS90YWppcmhhczkvdmFyc2l0eS9zb2Z0d2FyZV9lbmdpbmVlcmluZy9jdGFzL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvaG9tZS90YWppcmhhczkvdmFyc2l0eS9zb2Z0d2FyZV9lbmdpbmVlcmluZy9jdGFzL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvdGFqaXJoYXM5L3ZhcnNpdHkvc29mdHdhcmVfZW5naW5lZXJpbmcvY3Rhcy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS90YWppcmhhczkvdmFyc2l0eS9zb2Z0d2FyZV9lbmdpbmVlcmluZy9jdGFzL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL2hvbWUvdGFqaXJoYXM5L3ZhcnNpdHkvc29mdHdhcmVfZW5naW5lZXJpbmcvY3Rhcy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbXBvbmVudCwgVnVlLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgeyBQZXJtaXNzaW9uTW9kdWxlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3Blcm1pc3Npb24nOwppbXBvcnQgeyBUYWdzVmlld01vZHVsZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy90YWdzLXZpZXcnOwppbXBvcnQgU2Nyb2xsUGFuZSBmcm9tICcuL1Njcm9sbFBhbmUudnVlJzsKCnZhciBkZWZhdWx0XzEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9WdWUpIHsKICBfaW5oZXJpdHMoZGVmYXVsdF8xLCBfVnVlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihkZWZhdWx0XzEpOwoKICBmdW5jdGlvbiBkZWZhdWx0XzEoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGRlZmF1bHRfMSk7CgogICAgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIF90aGlzLnZpc2libGUgPSBmYWxzZTsKICAgIF90aGlzLnRvcCA9IDA7CiAgICBfdGhpcy5sZWZ0ID0gMDsKICAgIF90aGlzLnNlbGVjdGVkVGFnID0ge307CiAgICBfdGhpcy5hZmZpeFRhZ3MgPSBbXTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhkZWZhdWx0XzEsIFt7CiAgICBrZXk6ICJ2aXNpdGVkVmlld3MiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBUYWdzVmlld01vZHVsZS52aXNpdGVkVmlld3M7CiAgICB9CiAgfSwgewogICAga2V5OiAicm91dGVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gUGVybWlzc2lvbk1vZHVsZS5yb3V0ZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAib25Sb3V0ZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Sb3V0ZUNoYW5nZSgpIHsKICAgICAgdGhpcy5hZGRUYWdzKCk7CiAgICAgIHRoaXMubW92ZVRvQ3VycmVudFRhZygpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uVmlzaWJsZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25WaXNpYmxlQ2hhbmdlKHZhbHVlKSB7CiAgICAgIGlmICh2YWx1ZSkgewogICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTWVudSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VNZW51KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIm1vdW50ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAgIHRoaXMuaW5pdFRhZ3MoKTsKICAgICAgdGhpcy5hZGRUYWdzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNBY3RpdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzQWN0aXZlKHJvdXRlKSB7CiAgICAgIHJldHVybiByb3V0ZS5wYXRoID09PSB0aGlzLiRyb3V0ZS5wYXRoOwogICAgfQogIH0sIHsKICAgIGtleTogImlzQWZmaXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzQWZmaXgodGFnKSB7CiAgICAgIHJldHVybiB0YWcubWV0YSAmJiB0YWcubWV0YS5hZmZpeDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWx0ZXJBZmZpeFRhZ3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlckFmZml4VGFncyhyb3V0ZXMpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgYmFzZVBhdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcvJzsKICAgICAgdmFyIHRhZ3MgPSBbXTsKICAgICAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgICAgaWYgKHJvdXRlLm1ldGEgJiYgcm91dGUubWV0YS5hZmZpeCkgewogICAgICAgICAgdmFyIHRhZ1BhdGggPSBwYXRoLnJlc29sdmUoYmFzZVBhdGgsIHJvdXRlLnBhdGgpOwogICAgICAgICAgdGFncy5wdXNoKHsKICAgICAgICAgICAgZnVsbFBhdGg6IHRhZ1BhdGgsCiAgICAgICAgICAgIHBhdGg6IHRhZ1BhdGgsCiAgICAgICAgICAgIG5hbWU6IHJvdXRlLm5hbWUsCiAgICAgICAgICAgIG1ldGE6IF9vYmplY3RTcHJlYWQoe30sIHJvdXRlLm1ldGEpCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGlmIChyb3V0ZS5jaGlsZHJlbikgewogICAgICAgICAgdmFyIGNoaWxkVGFncyA9IF90aGlzMi5maWx0ZXJBZmZpeFRhZ3Mocm91dGUuY2hpbGRyZW4sIHJvdXRlLnBhdGgpOwoKICAgICAgICAgIGlmIChjaGlsZFRhZ3MubGVuZ3RoID49IDEpIHsKICAgICAgICAgICAgdGFncyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGFncyksIF90b0NvbnN1bWFibGVBcnJheShjaGlsZFRhZ3MpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gdGFnczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbml0VGFncyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFRhZ3MoKSB7CiAgICAgIHRoaXMuYWZmaXhUYWdzID0gdGhpcy5maWx0ZXJBZmZpeFRhZ3ModGhpcy5yb3V0ZXMpOwoKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuYWZmaXhUYWdzKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHRhZyA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgIC8vIE11c3QgaGF2ZSB0YWcgbmFtZQogICAgICAgICAgaWYgKHRhZy5uYW1lKSB7CiAgICAgICAgICAgIFRhZ3NWaWV3TW9kdWxlLmFkZFZpc2l0ZWRWaWV3KHRhZyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRUYWdzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRUYWdzKCkgewogICAgICB2YXIgbmFtZSA9IHRoaXMuJHJvdXRlLm5hbWU7CgogICAgICBpZiAobmFtZSkgewogICAgICAgIFRhZ3NWaWV3TW9kdWxlLmFkZFZpZXcodGhpcy4kcm91dGUpOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAibW92ZVRvQ3VycmVudFRhZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRvQ3VycmVudFRhZygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgdGFncyA9IHRoaXMuJHJlZnMudGFnOyAvLyBUT0RPOiBiZXR0ZXIgdHlwZXNjcmlwdCBzdXBwb3J0IGZvciByb3V0ZXItbGluawoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGFncyksCiAgICAgICAgICAgIF9zdGVwMjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciB0YWcgPSBfc3RlcDIudmFsdWU7CgogICAgICAgICAgICBpZiAodGFnLnRvLnBhdGggPT09IF90aGlzMy4kcm91dGUucGF0aCkgewogICAgICAgICAgICAgIF90aGlzMy4kcmVmcy5zY3JvbGxQYW5lLm1vdmVUb1RhcmdldCh0YWcpOyAvLyBXaGVuIHF1ZXJ5IGlzIGRpZmZlcmVudCB0aGVuIHVwZGF0ZQoKCiAgICAgICAgICAgICAgaWYgKHRhZy50by5mdWxsUGF0aCAhPT0gX3RoaXMzLiRyb3V0ZS5mdWxsUGF0aCkgewogICAgICAgICAgICAgICAgVGFnc1ZpZXdNb2R1bGUudXBkYXRlVmlzaXRlZFZpZXcoX3RoaXMzLiRyb3V0ZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVmcmVzaFNlbGVjdGVkVGFnIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoU2VsZWN0ZWRUYWcodmlldykgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIFRhZ3NWaWV3TW9kdWxlLmRlbENhY2hlZFZpZXcodmlldyk7CiAgICAgIHZhciBmdWxsUGF0aCA9IHZpZXcuZnVsbFBhdGg7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczQuJHJvdXRlci5yZXBsYWNlKHsKICAgICAgICAgIHBhdGg6ICcvcmVkaXJlY3QnICsgZnVsbFBhdGgKICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xvc2VTZWxlY3RlZFRhZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VTZWxlY3RlZFRhZyh2aWV3KSB7CiAgICAgIFRhZ3NWaWV3TW9kdWxlLmRlbFZpZXcodmlldyk7CgogICAgICBpZiAodGhpcy5pc0FjdGl2ZSh2aWV3KSkgewogICAgICAgIHRoaXMudG9MYXN0VmlldyhUYWdzVmlld01vZHVsZS52aXNpdGVkVmlld3MsIHZpZXcpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xvc2VPdGhlcnNUYWdzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZU90aGVyc1RhZ3MoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGFnLmZ1bGxQYXRoICE9PSB0aGlzLiRyb3V0ZS5wYXRoICYmIHRoaXMuc2VsZWN0ZWRUYWcuZnVsbFBhdGggIT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHRoaXMuc2VsZWN0ZWRUYWcuZnVsbFBhdGgpWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBUYWdzVmlld01vZHVsZS5kZWxPdGhlcnNWaWV3cyh0aGlzLnNlbGVjdGVkVGFnKTsKICAgICAgdGhpcy5tb3ZlVG9DdXJyZW50VGFnKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xvc2VBbGxUYWdzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZUFsbFRhZ3ModmlldykgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIFRhZ3NWaWV3TW9kdWxlLmRlbEFsbFZpZXdzKCk7CgogICAgICBpZiAodGhpcy5hZmZpeFRhZ3Muc29tZShmdW5jdGlvbiAodGFnKSB7CiAgICAgICAgcmV0dXJuIHRhZy5wYXRoID09PSBfdGhpczUuJHJvdXRlLnBhdGg7CiAgICAgIH0pKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLnRvTGFzdFZpZXcoVGFnc1ZpZXdNb2R1bGUudmlzaXRlZFZpZXdzLCB2aWV3KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0xhc3RWaWV3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0xhc3RWaWV3KHZpc2l0ZWRWaWV3cywgdmlldykgewogICAgICB2YXIgbGF0ZXN0VmlldyA9IHZpc2l0ZWRWaWV3cy5zbGljZSgtMSlbMF07CgogICAgICBpZiAobGF0ZXN0VmlldyAhPT0gdW5kZWZpbmVkICYmIGxhdGVzdFZpZXcuZnVsbFBhdGggIT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKGxhdGVzdFZpZXcuZnVsbFBhdGgpWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIERlZmF1bHQgcmVkaXJlY3QgdG8gdGhlIGhvbWUgcGFnZSBpZiB0aGVyZSBpcyBubyB0YWdzLXZpZXcsIGFkanVzdCBpdCBpZiB5b3Ugd2FudAogICAgICAgIGlmICh2aWV3Lm5hbWUgPT09ICdEYXNoYm9hcmQnKSB7CiAgICAgICAgICAvLyB0byByZWxvYWQgaG9tZSBwYWdlCiAgICAgICAgICB0aGlzLiRyb3V0ZXIucmVwbGFjZSh7CiAgICAgICAgICAgIHBhdGg6ICcvcmVkaXJlY3QnICsgdmlldy5mdWxsUGF0aAogICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnLycpWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJvcGVuTWVudSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3Blbk1lbnUodGFnLCBlKSB7CiAgICAgIHZhciBtZW51TWluV2lkdGggPSAxMDU7CiAgICAgIHZhciBvZmZzZXRMZWZ0ID0gdGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDsgLy8gY29udGFpbmVyIG1hcmdpbiBsZWZ0CgogICAgICB2YXIgb2Zmc2V0V2lkdGggPSB0aGlzLiRlbC5vZmZzZXRXaWR0aDsgLy8gY29udGFpbmVyIHdpZHRoCgogICAgICB2YXIgbWF4TGVmdCA9IG9mZnNldFdpZHRoIC0gbWVudU1pbldpZHRoOyAvLyBsZWZ0IGJvdW5kYXJ5CgogICAgICB2YXIgbGVmdCA9IGUuY2xpZW50WCAtIG9mZnNldExlZnQgKyAxNTsgLy8gMTU6IG1hcmdpbiByaWdodAoKICAgICAgaWYgKGxlZnQgPiBtYXhMZWZ0KSB7CiAgICAgICAgdGhpcy5sZWZ0ID0gbWF4TGVmdDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0OwogICAgICB9CgogICAgICB0aGlzLnRvcCA9IGUuY2xpZW50WTsKICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy5zZWxlY3RlZFRhZyA9IHRhZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjbG9zZU1lbnUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlTWVudSgpIHsKICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFuZGxlU2Nyb2xsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTY3JvbGwoKSB7CiAgICAgIHRoaXMuY2xvc2VNZW51KCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gZGVmYXVsdF8xOwp9KFZ1ZSk7CgpfX2RlY29yYXRlKFtXYXRjaCgnJHJvdXRlJyldLCBkZWZhdWx0XzEucHJvdG90eXBlLCAib25Sb3V0ZUNoYW5nZSIsIG51bGwpOwoKX19kZWNvcmF0ZShbV2F0Y2goJ3Zpc2libGUnKV0sIGRlZmF1bHRfMS5wcm90b3R5cGUsICJvblZpc2libGVDaGFuZ2UiLCBudWxsKTsKCmRlZmF1bHRfMSA9IF9fZGVjb3JhdGUoW0NvbXBvbmVudCh7CiAgbmFtZTogJ1RhZ3NWaWV3JywKICBjb21wb25lbnRzOiB7CiAgICBTY3JvbGxQYW5lOiBTY3JvbGxQYW5lCiAgfQp9KV0sIGRlZmF1bHRfMSk7CmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRfMTs="},null]}
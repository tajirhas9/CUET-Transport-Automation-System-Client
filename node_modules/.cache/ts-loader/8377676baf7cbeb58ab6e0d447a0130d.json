{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js??ref--14-3!/home/tajirhas9/varsity/software_engineering/ctas/client/src/store/modules/user.ts","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/store/modules/user.ts","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/babel.config.js","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
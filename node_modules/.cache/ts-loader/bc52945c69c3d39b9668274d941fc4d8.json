{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js??ref--15-2!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/eslint-loader/index.js??ref--14-0!/home/tajirhas9/varsity/software_engineering/ctas/client/src/store/modules/user.ts","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/store/modules/user.ts","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/babel.config.js","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/eslint-loader/index.js??ref--14-0!/home/tajirhas9/varsity/software_engineering/ctas/client/src/store/modules/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { VuexModule, Module, Action, Mutation, getModule } from 'vuex-module-decorators'\nimport { getUserInfo, login, logout } from '@/api/users'\nimport { getToken, setToken, removeToken } from '@/utils/cookies'\nimport router, { resetRouter } from '@/router'\nimport { PermissionModule } from './permission'\nimport { TagsViewModule } from './tags-view'\nimport store from '@/store'\nimport { Roles } from '@/api/enums'\n\nexport interface IUserState {\n  token: string\n  id: number\n  username: string\n  role: Roles\n}\n\n@Module({ dynamic: true, store, name: 'user' })\nclass User extends VuexModule implements IUserState {\n  public token = getToken() || ''\n  public username = ''\n  public id = -1\n  public role = Roles.undefined\n\n  @Mutation\n  private SET_TOKEN(token: string) {\n    this.token = token\n  }\n\n  @Mutation\n  private SET_USERNAME(username: string) {\n    this.username = username\n  }\n\n  @Mutation\n  private SET_ROLE(role: number) {\n    this.role = role\n  }\n\n  @Mutation\n  private SET_ID(id: number) {\n    this.id = id\n  }\n\n  @Action\n  public async Login(userInfo: { username: string, password: string}) {\n    let { username, password } = userInfo\n    username = username.trim()\n    try {\n      const { data } = await login({ username, password })\n      const user = data.user\n      setToken(data.accessToken)\n      this.SET_TOKEN(data.accessToken)\n      this.SET_USERNAME(user.username)\n      this.SET_ID(user.id)\n      this.SET_ROLE(user.role)\n    } catch (e: any) {\n      throw Error(e)\n    }\n  }\n\n  @Action\n  public async GetUserInfo() {\n    if (this.token === '') {\n      const localToken = getToken() || ''\n      if (localToken === '') {\n        throw Error('GetUserInfo: token is undefined!')\n      }\n      this.SET_TOKEN(localToken)\n    }\n    try {\n      const { data } = await getUserInfo()\n      const user = data.user\n      console.log(user)\n      this.SET_USERNAME(user.username)\n      this.SET_ID(user.id)\n      this.SET_ROLE(user.role)\n    } catch (e) {\n      throw Error('Failed to get user info')\n    }\n  }\n\n  @Action\n  public ResetToken() {\n    removeToken()\n    this.SET_TOKEN('')\n    this.SET_ROLE(-1)\n  }\n\n  @Action\n  public async ChangeRoles(role: string) {\n    // Dynamically modify permissions\n    const token = role + '-token'\n    this.SET_TOKEN(token)\n    setToken(token)\n    await this.GetUserInfo()\n    resetRouter()\n    // Generate dynamic accessible routes based on roles\n    PermissionModule.GenerateRoutes(this.role)\n    // Add generated routes\n    PermissionModule.dynamicRoutes.forEach(route => {\n      router.addRoute(route)\n    })\n    // Reset visited views and cached views\n    TagsViewModule.delAllViews()\n  }\n\n  @Action\n  public async LogOut() {\n    if (this.token === '') {\n      throw Error('LogOut: token is undefined!')\n    }\n    await logout()\n    removeToken()\n    resetRouter()\n\n    // Reset visited views and cached views\n    TagsViewModule.delAllViews()\n    this.SET_TOKEN('')\n    this.SET_ROLE(-1)\n  }\n}\n\nexport const UserModule = getModule(User)\n"],"sourceRoot":""}]}
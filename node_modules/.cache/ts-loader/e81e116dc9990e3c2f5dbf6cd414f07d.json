{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js??ref--14-3!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tajirhas9/varsity/software_engineering/ctas/client/src/views/login/index.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/views/login/index.vue","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/babel.config.js","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS90YWppcmhhczkvdmFyc2l0eS9zb2Z0d2FyZV9lbmdpbmVlcmluZy9jdGFzL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL3RhamlyaGFzOS92YXJzaXR5L3NvZnR3YXJlX2VuZ2luZWVyaW5nL2N0YXMvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL2hvbWUvdGFqaXJoYXM5L3ZhcnNpdHkvc29mdHdhcmVfZW5naW5lZXJpbmcvY3Rhcy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvaG9tZS90YWppcmhhczkvdmFyc2l0eS9zb2Z0d2FyZV9lbmdpbmVlcmluZy9jdGFzL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IENvbXBvbmVudCwgVnVlLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InOwppbXBvcnQgeyBVc2VyTW9kdWxlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3VzZXInOwppbXBvcnQgeyBpc1ZhbGlkVXNlcm5hbWUgfSBmcm9tICdAL3V0aWxzL3ZhbGlkYXRlJzsKaW1wb3J0IExhbmdTZWxlY3QgZnJvbSAnQC9jb21wb25lbnRzL0xhbmdTZWxlY3QvaW5kZXgudnVlJzsKaW1wb3J0IFNvY2lhbFNpZ24gZnJvbSAnLi9jb21wb25lbnRzL1NvY2lhbFNpZ25pbi52dWUnOwoKdmFyIGRlZmF1bHRfMSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhkZWZhdWx0XzEsIF9WdWUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKGRlZmF1bHRfMSk7CgogIGZ1bmN0aW9uIGRlZmF1bHRfMSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgZGVmYXVsdF8xKTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICAgIF90aGlzLnZhbGlkYXRlVXNlcm5hbWUgPSBmdW5jdGlvbiAocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgICAgIGlmICghaXNWYWxpZFVzZXJuYW1lKHZhbHVlKSkgewogICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignUGxlYXNlIGVudGVyIHRoZSBjb3JyZWN0IHVzZXIgbmFtZScpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjaygpOwogICAgICB9CiAgICB9OwoKICAgIF90aGlzLnZhbGlkYXRlUGFzc3dvcmQgPSBmdW5jdGlvbiAocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPCAzKSB7CiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdUaGUgcGFzc3dvcmQgY2FuIG5vdCBiZSBsZXNzIHRoYW4gNiBkaWdpdHMnKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FsbGJhY2soKTsKICAgICAgfQogICAgfTsKCiAgICBfdGhpcy5sb2dpbkZvcm0gPSB7CiAgICAgIHVzZXJuYW1lOiAnYWRtaW4nLAogICAgICBwYXNzd29yZDogJ2FkbWluJwogICAgfTsKICAgIF90aGlzLmxvZ2luUnVsZXMgPSB7CiAgICAgIHVzZXJuYW1lOiBbewogICAgICAgIHZhbGlkYXRvcjogX3RoaXMudmFsaWRhdGVVc2VybmFtZSwKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHBhc3N3b3JkOiBbewogICAgICAgIHZhbGlkYXRvcjogX3RoaXMudmFsaWRhdGVQYXNzd29yZCwKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0KICAgIH07CiAgICBfdGhpcy5wYXNzd29yZFR5cGUgPSAncGFzc3dvcmQnOwogICAgX3RoaXMubG9hZGluZyA9IGZhbHNlOwogICAgX3RoaXMuc2hvd0RpYWxvZyA9IGZhbHNlOwogICAgX3RoaXMuY2Fwc1Rvb2x0aXAgPSBmYWxzZTsKICAgIF90aGlzLm90aGVyUXVlcnkgPSB7fTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhkZWZhdWx0XzEsIFt7CiAgICBrZXk6ICJvblJvdXRlQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblJvdXRlQ2hhbmdlKHJvdXRlKSB7CiAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGUgImFzIERpY3Rpb25hcnk8c3RyaW5nPiIgaGFjayBhZnRlciB2NCByZWxlYXNlIGZvciB2dWUtcm91dGVyCiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzIwNTAgZm9yIGRldGFpbHMKICAgICAgdmFyIHF1ZXJ5ID0gcm91dGUucXVlcnk7CgogICAgICBpZiAocXVlcnkpIHsKICAgICAgICB0aGlzLnJlZGlyZWN0ID0gcXVlcnkucmVkaXJlY3Q7CiAgICAgICAgdGhpcy5vdGhlclF1ZXJ5ID0gdGhpcy5nZXRPdGhlclF1ZXJ5KHF1ZXJ5KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIm1vdW50ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAgIGlmICh0aGlzLmxvZ2luRm9ybS51c2VybmFtZSA9PT0gJycpIHsKICAgICAgICB0aGlzLiRyZWZzLnVzZXJuYW1lLmZvY3VzKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5sb2dpbkZvcm0ucGFzc3dvcmQgPT09ICcnKSB7CiAgICAgICAgdGhpcy4kcmVmcy5wYXNzd29yZC5mb2N1cygpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY2hlY2tDYXBzbG9jayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tDYXBzbG9jayhlKSB7CiAgICAgIHZhciBrZXkgPSBlLmtleTsKICAgICAgdGhpcy5jYXBzVG9vbHRpcCA9IGtleSAhPT0gbnVsbCAmJiBrZXkubGVuZ3RoID09PSAxICYmIGtleSA+PSAnQScgJiYga2V5IDw9ICdaJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaG93UHdkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93UHdkKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnBhc3N3b3JkVHlwZSA9PT0gJ3Bhc3N3b3JkJykgewogICAgICAgIHRoaXMucGFzc3dvcmRUeXBlID0gJyc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5wYXNzd29yZFR5cGUgPSAncGFzc3dvcmQnOwogICAgICB9CgogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMyLiRyZWZzLnBhc3N3b3JkLmZvY3VzKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImhhbmRsZUxvZ2luIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVMb2dpbigpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLiRyZWZzLmxvZ2luRm9ybS52YWxpZGF0ZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh2YWxpZCkgewogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBfdGhpczMubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFVzZXJNb2R1bGUuTG9naW4oX3RoaXMzLmxvZ2luRm9ybSk7CgogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICBfdGhpczMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBwYXRoOiBfdGhpczMucmVkaXJlY3QgfHwgJy8nLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBfdGhpczMub3RoZXJRdWVyeQogICAgICAgICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICAgIF90aGlzMy5sb2FkaW5nID0gZmFsc2U7CgogICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDhdXSk7CiAgICAgICAgfSkpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0T3RoZXJRdWVyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3RoZXJRdWVyeShxdWVyeSkgewogICAgICByZXR1cm4gT2JqZWN0LmtleXMocXVlcnkpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXIpIHsKICAgICAgICBpZiAoY3VyICE9PSAncmVkaXJlY3QnKSB7CiAgICAgICAgICBhY2NbY3VyXSA9IHF1ZXJ5W2N1cl07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYWNjOwogICAgICB9LCB7fSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gZGVmYXVsdF8xOwp9KFZ1ZSk7CgpfX2RlY29yYXRlKFtXYXRjaCgnJHJvdXRlJywgewogIGltbWVkaWF0ZTogdHJ1ZQp9KV0sIGRlZmF1bHRfMS5wcm90b3R5cGUsICJvblJvdXRlQ2hhbmdlIiwgbnVsbCk7CgpkZWZhdWx0XzEgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIG5hbWU6ICdMb2dpbicsCiAgY29tcG9uZW50czogewogICAgTGFuZ1NlbGVjdDogTGFuZ1NlbGVjdCwKICAgIFNvY2lhbFNpZ246IFNvY2lhbFNpZ24KICB9Cn0pXSwgZGVmYXVsdF8xKTsKZXhwb3J0IGRlZmF1bHQgZGVmYXVsdF8xOw=="},null]}
{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tajirhas9/varsity/software_engineering/ctas/client/src/components/ThemePicker/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/components/ThemePicker/index.vue","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGhlbWUtbWVzc2FnZSwKLnRoZW1lLXBpY2tlci1kcm9wZG93biB7CiAgei1pbmRleDogOTk5OTkgIWltcG9ydGFudDsKfQoKLnRoZW1lLXBpY2tlciAuZWwtY29sb3ItcGlja2VyX190cmlnZ2VyIHsKICBoZWlnaHQ6IDI2cHggIWltcG9ydGFudDsKICB3aWR0aDogMjZweCAhaW1wb3J0YW50OwogIHBhZGRpbmc6IDJweDsKfQoKLnRoZW1lLXBpY2tlci1kcm9wZG93biAuZWwtY29sb3ItZHJvcGRvd25fX2xpbmstYnRuIHsKICBkaXNwbGF5OiBub25lOwp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ThemePicker","sourcesContent":["<template>\n  <el-color-picker\n    v-model=\"theme\"\n    :predefine=\"['#409EFF', '#1890ff', '#304156','#212121','#11a983', '#13c2c2', '#6959CD', '#f5222d']\"\n    class=\"theme-picker\"\n    popper-class=\"theme-picker-dropdown\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from 'vue-property-decorator'\nimport { SettingsModule } from '@/store/modules/settings'\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\nconst ORIGINAL_THEME = '#409EFF' // default color\n\n@Component({\n  name: 'ThemePicker'\n})\nexport default class extends Vue {\n  private chalk = '' // The content of theme-chalk css\n  private theme = ''\n\n  get defaultTheme() {\n    return SettingsModule.theme\n  }\n\n  @Watch('defaultTheme', { immediate: true })\n  private onDefaultThemeChange(value: string) {\n    this.theme = value\n  }\n\n  @Watch('theme')\n  private async onThemeChange(value: string) {\n    if (!value) return\n    const oldValue = this.chalk ? this.theme : ORIGINAL_THEME\n    const themeCluster = this.getThemeCluster(value.replace('#', ''))\n    const originalCluster = this.getThemeCluster(oldValue.replace('#', ''))\n    const message = this.$message({\n      message: '  Compiling the theme',\n      customClass: 'theme-message',\n      type: 'success',\n      duration: 0,\n      iconClass: 'el-icon-loading'\n    })\n\n    if (!this.chalk) {\n      const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\n      await this.getCSSString(url, 'chalk')\n    }\n\n    const getHandler = (variable: string, id: string) => {\n      return () => {\n        const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\n        const newStyle = this.updateStyle((this as any)[variable], originalCluster, themeCluster)\n\n        let styleTag = document.getElementById(id)\n        if (!styleTag) {\n          styleTag = document.createElement('style')\n          styleTag.setAttribute('id', id)\n          document.head.appendChild(styleTag)\n        }\n        styleTag.innerText = newStyle\n      }\n    }\n    const chalkHandler = getHandler('chalk', 'chalk-style')\n    chalkHandler()\n\n    let styles: HTMLElement[] = [].slice.call(document.querySelectorAll('style'))\n    styles = styles\n      .filter(style => {\n        const text = style.innerText\n        return new RegExp(oldValue, 'i').test(text) && !/Chalk Variables/.test(text)\n      })\n    styles.forEach(style => {\n      const { innerText } = style\n      if (typeof innerText !== 'string') return\n      style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\n    })\n\n    this.$emit('change', value)\n    message.close()\n  }\n\n  private updateStyle(style: string, oldCluster: string[], newCluster: string[]) {\n    let newStyle = style\n    oldCluster.forEach((color, index) => {\n      newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\n    })\n    return newStyle\n  }\n\n  private getCSSString(url: string, variable: string) {\n    return new Promise<void>(resolve => {\n      const xhr = new XMLHttpRequest()\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          (this as any)[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\n          resolve()\n        }\n      }\n      xhr.open('GET', url)\n      xhr.send()\n    })\n  }\n\n  private getThemeCluster(theme: string) {\n    const tintColor = (color: string, tint: number) => {\n      let red = parseInt(color.slice(0, 2), 16)\n      let green = parseInt(color.slice(2, 4), 16)\n      let blue = parseInt(color.slice(4, 6), 16)\n      if (tint === 0) { // when primary color is in its rgb space\n        return [red, green, blue].join(',')\n      } else {\n        red += Math.round(tint * (255 - red))\n        green += Math.round(tint * (255 - green))\n        blue += Math.round(tint * (255 - blue))\n        return `#${red.toString(16)}${green.toString(16)}${blue.toString(16)}`\n      }\n    }\n\n    const shadeColor = (color: string, shade: number) => {\n      let red = parseInt(color.slice(0, 2), 16)\n      let green = parseInt(color.slice(2, 4), 16)\n      let blue = parseInt(color.slice(4, 6), 16)\n      red = Math.round((1 - shade) * red)\n      green = Math.round((1 - shade) * green)\n      blue = Math.round((1 - shade) * blue)\n      return `#${red.toString(16)}${green.toString(16)}${blue.toString(16)}`\n    }\n\n    const clusters = [theme]\n    for (let i = 0; i <= 9; i++) {\n      clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\n    }\n    clusters.push(shadeColor(theme, 0.1))\n    return clusters\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.theme-message,\n.theme-picker-dropdown {\n  z-index: 99999 !important;\n}\n\n.theme-picker .el-color-picker__trigger {\n  height: 26px !important;\n  width: 26px !important;\n  padding: 2px;\n}\n\n.theme-picker-dropdown .el-color-dropdown__link-btn {\n  display: none;\n}\n</style>\n"]}]}
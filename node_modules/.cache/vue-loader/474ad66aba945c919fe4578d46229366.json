{"remainingRequest":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tajirhas9/varsity/software_engineering/ctas/client/src/views/drivers/components/table.vue?vue&type=template&id=2940151a&","dependencies":[{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/src/views/drivers/components/table.vue","mtime":1640465303000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tajirhas9/varsity/software_engineering/ctas/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}